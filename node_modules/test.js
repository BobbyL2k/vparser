/* jshint
    esversion:6,
    node:true
*/
"use strict";
const assert = require('assert');
var colors = require('colors');

colors.setTheme({
  info: 'green',
  warn: 'yellow',
  error: 'red',
  errorCause: 'bgRed',
//   silly: 'rainbow',
//   input: 'grey',
//   verbose: 'cyan',
//   prompt: 'grey',
//   data: 'grey',
//   help: 'cyan',
//   debug: 'blue',
});

var aboutToDisplay = false;
var level = -1;

var testPassing;
var testFatal;
var summaries;
var shallowMsgObj;
var msgObjStack;

function reset(){
    testPassing = true;
    testFatal = false;
    summaries = [];
    shallowMsgObj = undefined;
    msgObjStack = [];
}

reset();

function sp(level){
    var res = "";
    for(var c=0; c<level; c++){
        res += "   ";
    }
    return res;
}

class NotImplementedError extends Error{}

module.exports = function test(msg, call, summary=false){
    var currentLevel = level;
    var oldSummaries = summaries;
    if(summary){
        summaries = [];
        if(aboutToDisplay){
            console.log(`${msg} requesting summary`.warn);
            console.log('Do not request multiple summary'.warn);
            summary = false;
        }
        aboutToDisplay = true;
    }
    level++;
    var msgObj = {msg, level, result:'PASSED'};
    msgObjStack[level] = msgObj;
    summaries.push(msgObj);
    if(!testFatal){
        testPassing = true;
        try{
            call();
            if(msgObj.result == 'PASSED')
                msgObj.result = testPassing?'PASSED':'SOME_FAILED';
        } catch(e){
            if(e instanceof NotImplementedError){
                msgObj.result = 'NOTIMPLEMENTED';
            }else{
                msgObjStack[level].result = 'FAILED';
                msgObj.exception = e;
                testPassing = false;
                testFatal = true;
            }
        }
        if(!testPassing){
            for(var c=level-1; c>=0; c--)
                msgObjStack[c].result = 'SOME_FAILED';
        }
    }else{
        msgObj.result = 'UNKNOWN';
    }
    level--;
    if(summary){
        display_summary(summaries, level+1);
        summaries.forEach((summary)=>{oldSummaries.push(summary)});
        summaries = oldSummaries;
    }
};

function display_summary(summaries, level_offset=0){
    summaries.forEach(function(summary){
        if(summary.result == 'PASSED'){
            console.log(`${sp(summary.level - level_offset)}\u2713 ${summary.msg} : Passed!`.info);
        }
        else if(summary.result == 'FAILED'){
            console.log(`${sp(summary.level - level_offset)}\u2717 ${summary.msg} : Failed!`.errorCause);
            console.log(summary.exception.stack);
        }else if(summary.result == 'SOME_FAILED'){
            console.log(`${sp(summary.level - level_offset)}\u2717 ${summary.msg} : Failed!`.error);
        }else if(summary.result == 'NOTIMPLEMENTED'){
            console.log(`${sp(summary.level - level_offset)}- ${summary.msg} : Not implemented!`.warn);
        }else{
            assert(summary.result == 'UNKNOWN', `${summary.result}`);
            console.log(`${sp(summary.level - level_offset)}- ${summary.msg} : Not tested!`.warn);
        }

        if(summary.warning){
            summary.warning.forEach(function(warning){
                console.log(warning.warn);
            });
        }
    });
}

module.exports.summary = function(){
    display_summary(summaries);
    reset();
};

module.exports.skip = function(){

};

module.exports.notImplemented = function(){
    throw new NotImplementedError();
};

module.exports.nonFatalFail = function(warning){
    if(msgObjStack[level].warning === undefined){
        msgObjStack[level].warning = [];
    }
    msgObjStack[level].warning.push(warning);
    testPassing = false;
};